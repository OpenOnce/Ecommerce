// <auto-generated />
using System;
using Hydra.Migrations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hydra.Migrations.Migrations
{
    [DbContext(typeof(MigrationContext))]
    [Migration("20240101202041_dbVersion_33")]
    partial class dbVersion_33
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DiscountCategory", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("DiscountId", "CategoryId")
                        .HasName("PK_Discount_AppliedToCategories");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Discount_AppliedToCategories_Category_Id");

                    b.HasIndex(new[] { "DiscountId" }, "IX_Discount_AppliedToCategories_Discount_Id");

                    b.ToTable("DiscountCategory", "Sale");
                });

            modelBuilder.Entity("DiscountManufacturer", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.HasKey("DiscountId", "ManufacturerId")
                        .HasName("PK_Discount_AppliedToManufacturers");

                    b.HasIndex(new[] { "DiscountId" }, "IX_Discount_AppliedToManufacturers_Discount_Id");

                    b.HasIndex(new[] { "ManufacturerId" }, "IX_Discount_AppliedToManufacturers_Manufacturer_Id");

                    b.ToTable("DiscountManufacturer", "Sale");
                });

            modelBuilder.Entity("DiscountProduct", b =>
                {
                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("DiscountId", "ProductId")
                        .HasName("PK_Discount_AppliedToProducts");

                    b.HasIndex(new[] { "DiscountId" }, "IX_Discount_AppliedToProducts_Discount_Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_Discount_AppliedToProducts_Product_Id");

                    b.ToTable("DiscountProduct", "Sale");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<int?>("PreviewImageId")
                        .HasColumnType("int");

                    b.Property<string>("PreviewImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("WriterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("PreviewImageId");

                    b.HasIndex("WriterId");

                    b.ToTable("Article", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.ArticleTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "ArticleId");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleTag", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.ArticleTopic", b =>
                {
                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.HasKey("TopicId", "ArticleId");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleTopic", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("ImagePreviewId")
                        .HasColumnType("int");

                    b.Property<int>("LinkSectionId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LinkSectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Link", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.LinkSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("LinkSection", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("PreviewImageId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menu", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<string>("PageTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("WriterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EditorId");

                    b.HasIndex("WriterId");

                    b.ToTable("Page", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.PageTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "PageId");

                    b.HasIndex("PageId");

                    b.ToTable("PageTag", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Slideshow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("PreviewImageId")
                        .HasColumnType("int");

                    b.Property<string>("PreviewImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Slideshow", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tag", "Cms");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Topic", "Cms");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailInbox", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInboxAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("EmailInboxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailInboxId");

                    b.ToTable("EmailInboxAttachment", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInboxFromAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailInboxId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailInboxId");

                    b.ToTable("EmailInboxFromAddress", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInboxToAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailInboxId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailInboxId");

                    b.ToTable("EmailInboxToAddress", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReplayToId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("ReplayToId");

                    b.ToTable("EmailOutbox", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutboxAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("EmailOutboxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailOutboxId");

                    b.ToTable("EmailOutboxAttachment", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutboxFromAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailOutboxId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailOutboxId");

                    b.ToTable("EmailOutboxFromAddress", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutboxToAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailOutboxId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailOutboxId");

                    b.ToTable("EmailOutboxToAddress", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Message.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FromUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.ToTable("Message", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Message.MessageAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("MessageAttachment", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Message.MessageUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<int>("ToUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("ToUserId");

                    b.ToTable("MessageUser", "Crm");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Subscribe.Subscribe", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SubscribeLabelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubscribeLabelId");

                    b.ToTable("Subscribe", "Cms");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Subscribe.SubscribeLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SubscribeLabel", "Cms");
                });

            modelBuilder.Entity("Hydra.FileStorage.Core.Domain.FileUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alt")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Directory")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Tags")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FileUpload", "FS");
                });

            modelBuilder.Entity("Hydra.Infrastructure.Security.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Permission", "Auth");
                });

            modelBuilder.Entity("Hydra.Infrastructure.Security.Domain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "Auth");
                });

            modelBuilder.Entity("Hydra.Infrastructure.Security.Domain.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", "Auth");
                });

            modelBuilder.Entity("Hydra.Infrastructure.Security.Domain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DefaultLanguage")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("DefaultTheme")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", "Auth");
                });

            modelBuilder.Entity("Hydra.Infrastructure.Security.Domain.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", "Auth");
                });

            modelBuilder.Entity("Hydra.Infrastructure.Security.Domain.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "Auth");
                });

            modelBuilder.Entity("Hydra.Infrastructure.Security.Domain.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", "Auth");
                });

            modelBuilder.Entity("Hydra.Infrastructure.Security.Domain.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", "Auth");
                });

            modelBuilder.Entity("Hydra.Infrastructure.Setting.Domain.SiteSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValueType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Setting", "Cms");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StateProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipPostalCode")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "CountryId" }, "IX_Address_CountryId");

                    b.HasIndex(new[] { "StateProvinceId" }, "IX_Address_StateProvinceId");

                    b.ToTable("Address", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("MetaKeywords")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowOnHomepage")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Category_DisplayOrder");

                    b.HasIndex(new[] { "ParentCategoryId" }, "IX_Category_ParentCategoryId");

                    b.ToTable("Category", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowsBilling")
                        .HasColumnType("bit");

                    b.Property<bool>("AllowsShipping")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumericIsoCode")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("SubjectToVat")
                        .HasColumnType("bit");

                    b.Property<string>("ThreeLetterIsoCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("TwoLetterIsoCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Country_DisplayOrder");

                    b.ToTable("Country", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CustomFormatting")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplayLocale")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("LimitedToStores")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("RoundingTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Currency_DisplayOrder");

                    b.ToTable("Currency", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.DeliveryDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryDate", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("DiscountLimitationId")
                        .HasColumnType("int");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("DiscountTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LimitationTimes")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaximumDiscountAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int?>("MaximumDiscountedQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("RequiresCouponCode")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDateUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<bool>("UsePercentage")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Discount", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("MetaKeywords")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DisplayOrder" }, "IX_Manufacturer_DisplayOrder");

                    b.ToTable("Manufacturer", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("AllowStoringCreditCardNumber")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<string>("CustomerIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("OrderDiscount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("OrderShippingTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<byte>("OrderStatusId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("OrderTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime?>("PaidDateUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<byte?>("PaymentMethodId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("PaymentStatusId")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("RefundedAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int?>("ShipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ShippingMethodId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<byte>("ShippingStatusId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("UserCurrencyId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ShippingMethodId");

                    b.HasIndex("UserCurrencyId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "CreatedOnUtc" }, "IX_Order_CreatedOnUtc")
                        .IsDescending();

                    b.HasIndex(new[] { "ShipmentId" }, "IX_Order_ShippingAddressId");

                    b.ToTable("Order", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.OrderDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<int>("DiscountId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex(new[] { "DiscountId", "OrderId" }, "IX_OrderDiscount");

                    b.ToTable("OrderDiscount", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DiscountAmountTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceTax")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("UnitPriceTax")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderItem_OrderId");

                    b.ToTable("OrderItem", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.OrderNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderNote_OrderId");

                    b.ToTable("OrderNote", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardCvv2")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CardExpirationMonth")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CardExpirationYear")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("MaskedCreditCardNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDateUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<string>("PaymentTrackingCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte?>("PaymentTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionTrackingCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK_RecurringPayment");

                    b.HasIndex(new[] { "OrderId" }, "IX_RecurringPayment_InitialOrderId");

                    b.ToTable("Payment", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminComment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("AllowCustomerReviews")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowedQuantities")
                        .HasColumnType("bit");

                    b.Property<int>("ApprovedRatingSum")
                        .HasColumnType("int");

                    b.Property<int>("ApprovedTotalReviews")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AvailableEndDateTimeUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<bool>("AvailableForPreOrder")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AvailableStartDateTimeUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<bool>("CallForPrice")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int>("DeliveryDateId")
                        .HasColumnType("int");

                    b.Property<bool>("DisableBuyButton")
                        .HasColumnType("bit");

                    b.Property<bool>("DisableWishlistButton")
                        .HasColumnType("bit");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("DisplayStockQuantity")
                        .HasColumnType("bit");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasDiscountsApplied")
                        .HasColumnType("bit");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("IsFreeShipping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxExempt")
                        .HasColumnType("bit");

                    b.Property<decimal>("Length")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("MarkAsNew")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MarkAsNewEndDateTimeUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<DateTime?>("MarkAsNewStartDateTimeUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<string>("MetaDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("MetaKeywords")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("MetaTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MinStockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NotApprovedRatingSum")
                        .HasColumnType("int");

                    b.Property<int>("NotApprovedTotalReviews")
                        .HasColumnType("int");

                    b.Property<bool>("NotReturnable")
                        .HasColumnType("bit");

                    b.Property<int>("NotifyAdminForQuantityBelow")
                        .HasColumnType("int");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("OrderMaximumQuantity")
                        .HasColumnType("int");

                    b.Property<int>("OrderMinimumQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("ShowOnHomepage")
                        .HasColumnType("bit");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<int>("TaxCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("Width")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryDateId");

                    b.HasIndex("TaxCategoryId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Published", "Deleted", "Id" }, "IX_Product_Deleted_and_Published");

                    b.ToTable("Product", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Product_Category_Mapping");

                    b.HasIndex(new[] { "CategoryId", "ProductId" }, "IX_PCM_Product_and_Category");

                    b.HasIndex(new[] { "CategoryId" }, "IX_Product_Category_Mapping_CategoryId");

                    b.HasIndex(new[] { "ProductId" }, "IX_Product_Category_Mapping_ProductId");

                    b.ToTable("ProductCategory", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ProductInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ReservedQuantity")
                        .HasColumnType("int");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_ProductWarehouseInventory");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductWarehouseInventory_ProductId");

                    b.ToTable("ProductInventory", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ProductManufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Product_Manufacturer_Mapping");

                    b.HasIndex(new[] { "ManufacturerId", "ProductId" }, "IX_PMM_Product_and_Manufacturer");

                    b.HasIndex(new[] { "ManufacturerId" }, "IX_Product_Manufacturer_Mapping_ManufacturerId");

                    b.HasIndex(new[] { "ProductId" }, "IX_Product_Manufacturer_Mapping_ProductId");

                    b.ToTable("ProductManufacturer", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ProductPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("PictureId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Product_Picture_Mapping");

                    b.HasIndex(new[] { "PictureId" }, "IX_Product_Picture_Mapping_PictureId");

                    b.HasIndex(new[] { "ProductId" }, "IX_Product_Picture_Mapping_ProductId");

                    b.ToTable("ProductPicture", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<bool>("CustomerNotifiedOfReply")
                        .HasColumnType("bit");

                    b.Property<int>("HelpfulNoTotal")
                        .HasColumnType("int");

                    b.Property<int>("HelpfulYesTotal")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReplyText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_ProductReview_CustomerId");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductReview_ProductId");

                    b.ToTable("ProductReview", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ProductReviewHelpfulness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductReviewId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("WasHelpful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ProductReviewId" }, "IX_ProductReviewHelpfulness_ProductReviewId");

                    b.ToTable("ProductReviewHelpfulness", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_ProductTag_Name");

                    b.ToTable("ProductTag", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.RelatedProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("ProductId1")
                        .HasColumnType("int");

                    b.Property<int>("ProductId2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId2");

                    b.HasIndex(new[] { "ProductId1" }, "IX_RelatedProduct_ProductId1");

                    b.ToTable("RelatedProduct", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.SearchTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Keyword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SearchTerm", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Shipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminComment")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<DateTime?>("DeliveryDateUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadyForPickupDateUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<DateTime?>("ShippedDateUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<decimal?>("TotalWeight")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrderId" }, "IX_Shipment_OrderId");

                    b.ToTable("Shipment", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ShipmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.HasIndex(new[] { "ShipmentId" }, "IX_ShipmentItem_ShipmentId");

                    b.ToTable("ShipmentItem", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ShippingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.ToTable("ShippingMethod", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<byte>("ShoppingCartTypeId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("UpdatedOnUtc")
                        .HasPrecision(6)
                        .HasColumnType("datetime2(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "Id" }, "IX_ShoppingCartItem");

                    b.ToTable("ShoppingCartItem", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.StateProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "IX_StateProvince_CountryId");

                    b.ToTable("StateProvince", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.TaxCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TaxCategory", "Sale");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.TaxRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("StateProvinceId")
                        .HasColumnType("int");

                    b.Property<int>("TaxCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateProvinceId");

                    b.HasIndex("TaxCategoryId");

                    b.ToTable("TaxRate", "Sale");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("PermissionRole", "Auth");
                });

            modelBuilder.Entity("ProductProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTagId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "ProductTagId")
                        .HasName("PK_Product_ProductTag_Mapping");

                    b.HasIndex(new[] { "ProductTagId" }, "IX_Product_ProductTag_Mapping_ProductTag_Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_Product_ProductTag_Mapping_Product_Id");

                    b.ToTable("ProductProductTag", "Sale");
                });

            modelBuilder.Entity("DiscountCategory", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DiscountCategory_Category");

                    b.HasOne("Hydra.Sale.Core.Domain.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DiscountCategory_Discount");
                });

            modelBuilder.Entity("DiscountManufacturer", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DiscountManufacturer_Discount");

                    b.HasOne("Hydra.Sale.Core.Domain.Manufacturer", null)
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DiscountManufacturer_Manufacturer");
                });

            modelBuilder.Entity("DiscountProduct", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DiscountProduct_Discount");

                    b.HasOne("Hydra.Sale.Core.Domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_DiscountProduct_Product");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Article", b =>
                {
                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Hydra.FileStorage.Core.Domain.FileUpload", "PreviewImage")
                        .WithMany()
                        .HasForeignKey("PreviewImageId");

                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editor");

                    b.Navigation("PreviewImage");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.ArticleTag", b =>
                {
                    b.HasOne("Hydra.Cms.Core.Domain.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hydra.Cms.Core.Domain.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.ArticleTopic", b =>
                {
                    b.HasOne("Hydra.Cms.Core.Domain.Article", "Article")
                        .WithMany("ArticleTopics")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hydra.Cms.Core.Domain.Topic", "Topic")
                        .WithMany("ArticleTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Link", b =>
                {
                    b.HasOne("Hydra.Cms.Core.Domain.LinkSection", "LinkSection")
                        .WithMany("Links")
                        .HasForeignKey("LinkSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkSection");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Menu", b =>
                {
                    b.HasOne("Hydra.Cms.Core.Domain.Menu", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Page", b =>
                {
                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "Editor")
                        .WithMany()
                        .HasForeignKey("EditorId");

                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Editor");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.PageTag", b =>
                {
                    b.HasOne("Hydra.Cms.Core.Domain.Page", "Page")
                        .WithMany("PageTags")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hydra.Cms.Core.Domain.Tag", "Tag")
                        .WithMany("PageTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Slideshow", b =>
                {
                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Topic", b =>
                {
                    b.HasOne("Hydra.Cms.Core.Domain.Topic", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInboxAttachment", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Email.EmailInbox", "EmailInbox")
                        .WithMany("EmailInboxAttachments")
                        .HasForeignKey("EmailInboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailInbox");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInboxFromAddress", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Email.EmailInbox", "EmailInbox")
                        .WithMany("EmailInboxFromAddress")
                        .HasForeignKey("EmailInboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailInbox");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInboxToAddress", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Email.EmailInbox", "EmailInbox")
                        .WithMany("EmailInboxToAddress")
                        .HasForeignKey("EmailInboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailInbox");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutbox", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Email.EmailInbox", "ReplayTo")
                        .WithMany("EmailOutboxs")
                        .HasForeignKey("ReplayToId");

                    b.Navigation("ReplayTo");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutboxAttachment", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Email.EmailOutbox", "EmailOutbox")
                        .WithMany("EmailOutboxAttachments")
                        .HasForeignKey("EmailOutboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailOutbox");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutboxFromAddress", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Email.EmailOutbox", "EmailOutbox")
                        .WithMany("EmailOutboxFromAddress")
                        .HasForeignKey("EmailOutboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailOutbox");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutboxToAddress", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Email.EmailOutbox", "EmailOutbox")
                        .WithMany("EmailOutboxToAddress")
                        .HasForeignKey("EmailOutboxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailOutbox");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Message.Message", b =>
                {
                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId");

                    b.Navigation("FromUser");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Message.MessageAttachment", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Message.Message", "Message")
                        .WithMany("MessageAttachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Message.MessageUser", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Message.Message", "Message")
                        .WithMany("MessageUsers")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Subscribe.Subscribe", b =>
                {
                    b.HasOne("Hydra.Crm.Core.Domain.Subscribe.SubscribeLabel", "SubscribeLabel")
                        .WithMany("Subscribes")
                        .HasForeignKey("SubscribeLabelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Subscribe_SubscribeLabel");

                    b.Navigation("SubscribeLabel");
                });

            modelBuilder.Entity("Hydra.FileStorage.Core.Domain.FileUpload", b =>
                {
                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hydra.Infrastructure.Security.Domain.RoleClaim", b =>
                {
                    b.HasOne("Hydra.Infrastructure.Security.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hydra.Infrastructure.Security.Domain.UserClaim", b =>
                {
                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hydra.Infrastructure.Security.Domain.UserLogin", b =>
                {
                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hydra.Infrastructure.Security.Domain.UserRole", b =>
                {
                    b.HasOne("Hydra.Infrastructure.Security.Domain.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hydra.Infrastructure.Security.Domain.UserToken", b =>
                {
                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Address", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Address_Country");

                    b.HasOne("Hydra.Sale.Core.Domain.StateProvince", "StateProvince")
                        .WithMany("Addresses")
                        .HasForeignKey("StateProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Address_StateProvince");

                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Address_User");

                    b.Navigation("Country");

                    b.Navigation("StateProvince");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Category", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId")
                        .HasConstraintName("FK_Category_Category");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Order", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Address");

                    b.HasOne("Hydra.Sale.Core.Domain.ShippingMethod", "ShippingMethod")
                        .WithMany("Orders")
                        .HasForeignKey("ShippingMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_ShippingMethod");

                    b.HasOne("Hydra.Sale.Core.Domain.Currency", "UserCurrency")
                        .WithMany("Orders")
                        .HasForeignKey("UserCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Order_Currency");

                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("Address");

                    b.Navigation("ShippingMethod");

                    b.Navigation("User");

                    b.Navigation("UserCurrency");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.OrderDiscount", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Discount", "Discount")
                        .WithMany("OrderDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDiscount_Discount");

                    b.HasOne("Hydra.Sale.Core.Domain.Order", "Order")
                        .WithMany("OrderDiscounts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDiscount_Order");

                    b.Navigation("Discount");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.OrderItem", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_Order");

                    b.HasOne("Hydra.Sale.Core.Domain.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_OrderItem_ProductId_Product_Id");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.OrderNote", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Order", "Order")
                        .WithMany("OrderNotes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_OrderNote_Order");

                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_OrderNote_User");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Payment", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Payment_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Product", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.DeliveryDate", "DeliveryDate")
                        .WithMany("Products")
                        .HasForeignKey("DeliveryDateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Product_DeliveryDate");

                    b.HasOne("Hydra.Sale.Core.Domain.TaxCategory", "TaxCategory")
                        .WithMany("Products")
                        .HasForeignKey("TaxCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Product_TaxCategory");

                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Product_User");

                    b.Navigation("DeliveryDate");

                    b.Navigation("TaxCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ProductCategory", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategory_Category");

                    b.HasOne("Hydra.Sale.Core.Domain.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ProductCategory_Product");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ProductInventory", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Product", "Product")
                        .WithMany("ProductInventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ProductInventory_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ProductManufacturer", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Manufacturer", "Manufacturer")
                        .WithMany("ProductManufacturers")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ProductManufacturer_Manufacturer");

                    b.HasOne("Hydra.Sale.Core.Domain.Product", "Product")
                        .WithMany("ProductManufacturers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ProductManufacturer_Product");

                    b.Navigation("Manufacturer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ProductPicture", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ProductPicture_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ProductReview", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ProductReview_Product");

                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ProductReview_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ProductReviewHelpfulness", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.ProductReview", "ProductReview")
                        .WithMany("ProductReviewHelpfulnesses")
                        .HasForeignKey("ProductReviewId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ProductReviewHelpfulness_ProductReview");

                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ProductReviewHelpfulness_User");

                    b.Navigation("ProductReview");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.RelatedProduct", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Product", "ProductId1Navigation")
                        .WithMany("RelatedProductProductId1Navigations")
                        .HasForeignKey("ProductId1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RelatedProduct_Product");

                    b.HasOne("Hydra.Sale.Core.Domain.Product", "ProductId2Navigation")
                        .WithMany("RelatedProductProductId2Navigations")
                        .HasForeignKey("ProductId2")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RelatedProduct_Product1");

                    b.Navigation("ProductId1Navigation");

                    b.Navigation("ProductId2Navigation");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Shipment", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Order", "Order")
                        .WithMany("Shipments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Shipment_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ShipmentItem", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.OrderItem", "OrderItem")
                        .WithMany("ShipmentItems")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ShipmentItem_OrderItem");

                    b.HasOne("Hydra.Sale.Core.Domain.Shipment", "Shipment")
                        .WithMany("ShipmentItems")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ShipmentItem_Shipment");

                    b.Navigation("OrderItem");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ShoppingCartItem", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ShoppingCartItem_Product");

                    b.HasOne("Hydra.Infrastructure.Security.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ShoppingCartItem_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.StateProvince", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Country", "Country")
                        .WithMany("StateProvinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_StateProvince_Country");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.TaxRate", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Country", "Country")
                        .WithMany("TaxRates")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_TaxRate_Country");

                    b.HasOne("Hydra.Sale.Core.Domain.StateProvince", "StateProvince")
                        .WithMany("TaxRates")
                        .HasForeignKey("StateProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_TaxRate_StateProvince");

                    b.HasOne("Hydra.Sale.Core.Domain.TaxCategory", "TaxCategory")
                        .WithMany("TaxRates")
                        .HasForeignKey("TaxCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_TaxRate_TaxCategory");

                    b.Navigation("Country");

                    b.Navigation("StateProvince");

                    b.Navigation("TaxCategory");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("Hydra.Infrastructure.Security.Domain.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hydra.Infrastructure.Security.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductProductTag", b =>
                {
                    b.HasOne("Hydra.Sale.Core.Domain.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ProductProductTag_Product");

                    b.HasOne("Hydra.Sale.Core.Domain.ProductTag", null)
                        .WithMany()
                        .HasForeignKey("ProductTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ProductProductTag_ProductTag");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Article", b =>
                {
                    b.Navigation("ArticleTags");

                    b.Navigation("ArticleTopics");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.LinkSection", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Page", b =>
                {
                    b.Navigation("PageTags");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Tag", b =>
                {
                    b.Navigation("ArticleTags");

                    b.Navigation("PageTags");
                });

            modelBuilder.Entity("Hydra.Cms.Core.Domain.Topic", b =>
                {
                    b.Navigation("ArticleTopics");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailInbox", b =>
                {
                    b.Navigation("EmailInboxAttachments");

                    b.Navigation("EmailInboxFromAddress");

                    b.Navigation("EmailInboxToAddress");

                    b.Navigation("EmailOutboxs");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Email.EmailOutbox", b =>
                {
                    b.Navigation("EmailOutboxAttachments");

                    b.Navigation("EmailOutboxFromAddress");

                    b.Navigation("EmailOutboxToAddress");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Message.Message", b =>
                {
                    b.Navigation("MessageAttachments");

                    b.Navigation("MessageUsers");
                });

            modelBuilder.Entity("Hydra.Crm.Core.Domain.Subscribe.SubscribeLabel", b =>
                {
                    b.Navigation("Subscribes");
                });

            modelBuilder.Entity("Hydra.Infrastructure.Security.Domain.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Hydra.Infrastructure.Security.Domain.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Country", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("StateProvinces");

                    b.Navigation("TaxRates");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Currency", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.DeliveryDate", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Discount", b =>
                {
                    b.Navigation("OrderDiscounts");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Manufacturer", b =>
                {
                    b.Navigation("ProductManufacturers");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Order", b =>
                {
                    b.Navigation("OrderDiscounts");

                    b.Navigation("OrderItems");

                    b.Navigation("OrderNotes");

                    b.Navigation("Payments");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.OrderItem", b =>
                {
                    b.Navigation("ShipmentItems");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductInventories");

                    b.Navigation("ProductManufacturers");

                    b.Navigation("ProductPictures");

                    b.Navigation("ProductReviews");

                    b.Navigation("RelatedProductProductId1Navigations");

                    b.Navigation("RelatedProductProductId2Navigations");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ProductReview", b =>
                {
                    b.Navigation("ProductReviewHelpfulnesses");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.Shipment", b =>
                {
                    b.Navigation("ShipmentItems");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.ShippingMethod", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.StateProvince", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("TaxRates");
                });

            modelBuilder.Entity("Hydra.Sale.Core.Domain.TaxCategory", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("TaxRates");
                });
#pragma warning restore 612, 618
        }
    }
}
